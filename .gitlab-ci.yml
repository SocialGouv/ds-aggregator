---
include:
  - project: SocialGouv/gitlab-ci-yml
    file: /base_yarn_stage.yml
    ref: v10.0.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_create_namespace_stage.yml
    ref: v10.0.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_docker_kubectl_image_stage.yml
    ref: v10.0.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_register_stage.yml
    ref: v10.0.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_deploy_nodejs_chart_stage.yml
    ref: v10.0.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_notify_github_stage.yml
    ref: v10.0.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_docker_helm_image_stage.yml
    ref: v10.0.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_delete_useless_k8s_ns_stage.yml
    ref: v10.0.0

variables:
  PROJECT: ds-aggregator
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_VERSION: "18.06"
  IMAGE_INFRA_BASE_NAME: "infra/images-docker"
  DEV_ENVIRONMENT_NAME: "ds-aggregator-dev"
  PROD_ENVIRONMENT_NAME: "prod"
  # Image Version
  NODE_VERSION: "10"
  CURL_VERSION: "7.67.0"
  HELM_VERSION: "0.20.0"
  KUBECTL_VERSION: "0.7.0"
  KINTO_VERSION: "13.6.3"
  MEMCACHED_VERSION: "1.5.12-alpine"
  POSTGRES_VERSION: "11-debian-9"
  POSTGRES_JOB_VERSION: "11-alpine"
  # Helm Chart Version
  POSTGRES_CHART_VERSION: "6.5.6"
  MEMCACHED_CHART_VERSION: "3.1.0"
  #Ports
  API_PORT: 4000
  KINTO_PORT: 8888
  POSTGRES_PORT: 5432
  MEMCACHED_PORT: 11212
  # Quotas api
  API_RESOURCE_CPU_LIMIT: "500m"
  API_RESOURCE_MEMORY_LIMIT: "256Mi"
  API_RESOURCE_CPU_REQUEST: "5m"
  API_RESOURCE_MEMORY_REQUEST: "32Mi"
  # Quotas Memcached
  MEMCACHED_RESOURCE_CPU_LIMIT: "50m"
  MEMCACHED_RESOURCE_MEMORY_LIMIT: "64Mi"
  MEMCACHED_RESOURCE_CPU_REQUEST: "0m"
  MEMCACHED_RESOURCE_MEMORY_REQUEST: "4Mi"
  # Quotas Kinto
  KINTO_RESOURCE_CPU_LIMIT: "1000m"
  KINTO_RESOURCE_MEMORY_LIMIT: "512Mi"
  KINTO_RESOURCE_CPU_REQUEST: "500m"
  KINTO_RESOURCE_MEMORY_REQUEST: "64Mi"
  # Quotas job init Kinto
  INIT_KINTO_RESOURCE_CPU_LIMIT: "20m"
  INIT_KINTO_RESOURCE_MEMORY_LIMIT: "16Mi"
  INIT_KINTO_RESOURCE_CPU_REQUEST: "0m"
  INIT_KINTO_RESOURCE_MEMORY_REQUEST: "4Mi"

stages:
  - Install
  - Code Quality
  - Registration
  - Deploy
  - Release
  - Notify Finished Deployment

.resolve_env: &resolve_env |-
  set -x

  export BRANCH_NAME=${BRANCH_NAME:=$CI_COMMIT_REF_SLUG}
  export HASH_SIZE=${HASH_SIZE:=7}
  export K8S_PROJECT=${K8S_PROJECT:=$PROJECT}
  BRANCH_NAME_HASHED=$( printf "${BRANCH_NAME}" | sha1sum | cut -c1-${HASH_SIZE} )
  export BRANCH_HASH=${BRANCH_HASH:="$BRANCH_NAME_HASHED"}
  export K8S_NAMESPACE="${PROJECT}-feature-${BRANCH_HASH}"


  if [[ -n $PRODUCTION ]]; then
    export BRANCH_HASH=prod
    export IMAGE_TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
    export K8S_NAMESPACE="${PROJECT}"
    export DOMAIN="wif.${PROJECT}.fabrique.social.gouv.fr"

  elif [[ "${BRANCH_NAME}" = "master" ]]; then
    export BRANCH_HASH=master
    export IMAGE_TAG=${CI_COMMIT_SHA}
    export K8S_NAMESPACE="${PROJECT}-${BRANCH_HASH}"
    export DOMAIN="${PROJECT}-master.dev.fabrique.social.gouv.fr"

  elif [[ -n "${CI_COMMIT_TAG}" ]]; then
    export BRANCH_HASH=preprod;
    export IMAGE_TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
    export K8S_NAMESPACE="${PROJECT}-${BRANCH_HASH}"
    export DOMAIN="${PROJECT}-preprod.dev.fabrique.social.gouv.fr"

  else
    export IMAGE_TAG=${CI_COMMIT_SHA}
    export DOMAIN="${BRANCH_HASH}-${PROJECT}.dev.fabrique.social.gouv.fr"
  fi

  export HOST="${DOMAIN}"

  set +x

before_script:
  - *resolve_env


################################ CODE QUALITY ###############################

Install:
  extends: .base_yarn
  except:
    variables:
      - $PRODUCTION

Lint:
  extends: .base_yarn_script
  except:
    variables:
      - $PRODUCTION
  dependencies:
    - Install
  needs:
    - Install
  script:
    - yarn lint

Test:
  extends: .base_yarn_script
  except:
    variables:
      - $PRODUCTION
  variables:
    ENVIRONMENT_TYPE: dev.local
  dependencies:
    - Install
  needs:
    - Install
  script:
    - yarn test

Build:
  extends: .base_yarn_script
  except:
    variables:
      - $PRODUCTION
  dependencies:
    - Install
  needs:
    - Install
  script:
    - yarn build
  artifacts:
    expire_in: 1 day
    paths:
      - packages/api/dist

Create namespace:
  extends: .base_create_namespace_stage
  except:
    variables:
      - $PRODUCTION
  after_script:
    - *resolve_env
    - echo "kubectl get secret -n ${K8S_NAMESPACE} ds-aggregator-secret"
    # Skip the job if the namespace exists
    - "[[ $(kubectl get secret -n ${K8S_NAMESPACE} ds-aggregator-secret) ]] && exit ${CI_JOB_SKIP_EXIT_CODE:-0}"
    #
    #
    - envsubst < ./k8s/secret/secret-dev.yml > k8s/secret/secret-dev-${PROJECT}.yml
    - kubectl apply -f k8s/secret/secret-dev-${PROJECT}.yml -n ${K8S_NAMESPACE}


################################ REGISTRATION ################################

.register_stage:
  extends:
    - .base_register_stage
  stage: Registration
  except:
    variables:
      - $PRODUCTION

#
Register api image:
  extends:
    - .register_stage
  dependencies:
    - Build
  needs:
    - Build
  before_script:
    - cp yarn.lock packages/api
  variables:
    CONTEXT: packages/api
    DOCKER_BUILD_ARGS: >-
      --shm-size 256M
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/api

Register init kinto image:
  extends:
    - .register_stage
  variables:
    CONTEXT: packages/kinto
    DOCKERFILE_PATH: packages/kinto/Dockerfile
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/kinto

################################# DEPLOY ###############################

Notify Starting Deployment:
  extends: .base_notify_pending_stage
  stage: Deploy

#

.deploy_with_app_chart:
  stage: Deploy
  extends: .base_deploy_nodejs_chart_stage
  dependencies: []
  variables:
    REGISTRY: ${CI_REGISTRY_IMAGE}


############################################
####                API                 ####
############################################

Deploy api:
  extends:
    - .deploy_with_app_chart
  variables:
    CONTEXT: api
    PORT: ${API_PORT}
    VALUES_FILE: ./k8s/api/values.yml
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION
#

Deploy api (prod):
  extends:
    - .deploy_with_app_chart
  variables:
    CONTEXT: api
    PORT: ${API_PORT}
    VALUES_FILE: ./k8s/api/values.yml
    API_RESOURCE_CPU_LIMIT: "500m"
    API_RESOURCE_MEMORY_LIMIT: "256Mi"
    API_RESOURCE_CPU_REQUEST: "5m"
    API_RESOURCE_MEMORY_REQUEST: "128Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    variables:
      - $PRODUCTION

############################################
####              MEMCACHED             ####
############################################

#
.deploy_memcached:
  stage: "Deploy"
  image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/helm:${HELM_VERSION}
  variables:
    HELM_RENDER_ARGS: ""
    CONTEXT: ds-aggregator
  script:
    - helm init --client-only
    - kubectl config set-context --current --namespace=${K8S_NAMESPACE}
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0/helm-just-linux-2.11.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.11.0
    - helm just fetch "stable/memcached#${MEMCACHED_CHART_VERSION}"
    - envsubst < k8s/memcached/values.yml > ./values.yaml
    - helm just render ${CONTEXT}-${BRANCH_HASH} memcached
      ${HELM_RENDER_ARGS}
      --values ./values.yaml
    - helm just apply ${CONTEXT}-${BRANCH_HASH}
#

Deploy memcached:
  extends:
    - .deploy_memcached
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy memcached (prod):
  extends:
    - .deploy_memcached
  variables:
    MEMCACHED_RESOURCE_CPU_LIMIT: "500m"
    MEMCACHED_RESOURCE_MEMORY_LIMIT: "256Mi"
    MEMCACHED_RESOURCE_CPU_REQUEST: "10m"
    MEMCACHED_RESOURCE_MEMORY_REQUEST: "32Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    variables:
      - $PRODUCTION


############################################
####                KINTO               ####
############################################

#
.deploy_kinto:
  stage: Deploy
  image: ${CI_REGISTRY}/socialgouv/docker/kubectl:${KUBECTL_VERSION}
  variables:
    PORT: ${KINTO_PORT}
  script:
    - export PG_HOST=$(kubectl get secret azure-pg-admin-user -n ds-aggregator-secret -ojsonpath='{.data.PG_HOST}' | base64 --decode)
    - export PG_USER_ENCODED=$(kubectl get secret azure-pg-admin-user -n ds-aggregator-secret -ojsonpath='{.data.ADMIN_PG_USER_ENCODED}' | base64 --decode)
    - export PG_PASSWORD_ENCODED=$(kubectl get secret azure-pg-admin-user -n ds-aggregator-secret -ojsonpath='{.data.ADMIN_PG_PASSWORD_ENCODED}' | base64 --decode)
    - export DS_AGGREGATOR_PG_USER=$(kubectl get secret azure-pg-ds-aggregator-user -n ds-aggregator-secret -ojsonpath='{.data.DS-AGGREGATOR_PG_USER_ENCODED}' | base64 --decode)
    - export DS_AGGREGATOR_PG_PASSWORD=$(kubectl get secret azure-pg-ds-aggregator-user -n ds-aggregator-secret -ojsonpath='{.data.DS-AGGREGATOR_PG_PASSWORD_ENCODED}' | base64 --decode)
    - envsubst < k8s/kinto/deployment.yml > k8s/kinto/deployment-${PROJECT}.yml
    - envsubst < k8s/kinto/service.yml > k8s/kinto/service-${PROJECT}.yml
    - envsubst < k8s/kinto/job-init-kinto.yml > k8s/kinto/job-init-kinto-${PROJECT}.yml
    - kubectl delete job init-kinto -n ${K8S_NAMESPACE} || true;
    - kubectl apply -f k8s/kinto/deployment-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f k8s/kinto/service-${PROJECT}.yml -n ${K8S_NAMESPACE}
    - kubectl apply -f k8s/kinto/job-init-kinto-${PROJECT}.yml -n ${K8S_NAMESPACE}
#

Deploy kinto:
  extends:
    - .deploy_kinto
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy kinto (prod):
  extends:
    - .deploy_kinto
  variables:
    KINTO_RESOURCE_CPU_LIMIT: "1000m"
    KINTO_RESOURCE_MEMORY_LIMIT: "512Mi"
    KINTO_RESOURCE_CPU_REQUEST: "500m"
    KINTO_RESOURCE_MEMORY_REQUEST: "256Mi"
    INIT_KINTO_RESOURCE_CPU_LIMIT: "20m"
    INIT_KINTO_RESOURCE_MEMORY_LIMIT: "16Mi"
    INIT_KINTO_RESOURCE_CPU_REQUEST: "10m"
    INIT_KINTO_RESOURCE_MEMORY_REQUEST: "8Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    variables:
      - $PRODUCTION


################################# RELEASE ###############################

Make a new release and deploy to preprod environment:
  stage: Release
  image: node:${NODE_VERSION}
  variables:
    GIT_AUTHOR_EMAIL: 45039513+SocialGroovyBot@users.noreply.github.com
    GIT_AUTHOR_NAME: Social Groovy Bot
    GIT_COMMITTER_EMAIL: ${GIT_AUTHOR_EMAIL}
    GIT_COMMITTER_NAME: ${GIT_AUTHOR_NAME}
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - ${CI_PROJECT_DIR}/.yarn
  before_script:
    - git checkout ${CI_COMMIT_REF_NAME}
    - git config user.name "Social Groovy Bot"
    - git config user.email "45039513+SocialGroovyBot@users.noreply.github.com"
    - git remote set-url origin https://${GITHUB_TOKEN}@github.com/${CI_PROJECT_PATH}.git
  script:
    - yarn config set cache-folder ${CI_PROJECT_DIR}/.yarn
    - yarn --frozen-lockfile
    - GH_TOKEN=${GITHUB_TOKEN} yarn lerna version ${LERNA_ARGS:="--force-publish --yes"}
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /^chore\(release.*/
  only:
    - master
  when: manual


################################# NOTIFY ###############################

Notify Fail:
  extends: .base_notify_fail_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment

Notify Success:
  extends: .base_notify_success_stage
  stage: Notify Finished Deployment
  dependencies:
    - Notify Starting Deployment

Delete useless k8s namespaces:
  extends: .base_delete_useless_k8s_ns_stage
